// Generated by CoffeeScript 1.7.1
(function() {
  var Board, Tile;

  Board = (function() {
    function Board() {
      this.size = 4;
      this.width = 100;
      this.padding = 15;
      this.init_dom();
    }

    Board.prototype.init_dom = function() {
      this._init_board_dom();
      return this._init_new_game_button();
    };

    Board.prototype._init_board_dom = function() {
      var $board, $cell, board_width, col, row, _i, _ref, _results;
      board_width = this.size * this.width + (this.size + 1) * this.padding;
      this.$board = $board = jQuery('<div>').addClass('board').css({
        'width': board_width,
        'height': board_width
      }).appendTo(document.body);
      this.cells = [];
      _results = [];
      for (row = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            $cell = jQuery('<div>').addClass('cell').css({
              'width': this.width,
              'height': this.width,
              'top': this.padding + row * (this.padding + this.width),
              'left': this.padding + col * (this.padding + this.width)
            }).attr({
              'data-row': row,
              'data-col': col
            }).appendTo($board);
            _results1.push(this.cells.push($cell));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Board.prototype._init_new_game_button = function() {
      var $new_game_button;
      return $new_game_button = jQuery('<div>').addClass('new-game').html('New Game').appendTo(document.body).on('click', (function(_this) {
        return function() {
          return _this.start_new_game();
        };
      })(this));
    };

    Board.prototype.start_new_game = function() {
      var i, _i, _results;
      this.clear();
      _results = [];
      for (i = _i = 0; _i <= 1; i = ++_i) {
        _results.push(this.generate_tile());
      }
      return _results;
    };

    Board.prototype.clear = function() {
      var $cell, i, j, _i, _len, _ref, _results;
      this.data = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(null);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.$board.find('.tile').remove();
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $cell = _ref[_i];
        _results.push($cell.removeClass('filled'));
      }
      return _results;
    };

    Board.prototype.generate_tile = function() {
      var $cell, col, empty_cells, rand, row;
      empty_cells = this.empty_cells();
      rand = ~~(Math.random() * empty_cells.length);
      $cell = empty_cells[rand];
      $cell.addClass('filled');
      row = $cell.data('row');
      col = $cell.data('col');
      return this.data[row][col] = new Tile(this, row, col);
    };

    Board.prototype.empty_cells = function() {
      var $cell, _i, _len, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $cell = _ref[_i];
        if (!$cell.hasClass('filled')) {
          _results.push($cell);
        }
      }
      return _results;
    };

    return Board;

  })();

  Tile = (function() {
    function Tile(board, row, col) {
      this.board = board;
      this.row = row;
      this.col = col;
      this.init_dom();
    }

    Tile.prototype.init_dom = function() {
      var $tile, padding, width;
      width = this.board.width;
      padding = this.board.padding;
      $tile = jQuery('<div>').addClass('tile num-2').html(2).css({
        'width': width,
        'height': width,
        'top': padding + this.row * (padding + width),
        'left': padding + this.col * (padding + width),
        'line-height': "" + width + "px"
      }).appendTo(this.board.$board);
      return setTimeout(function() {
        return $tile.addClass('visible');
      }, 1);
    };

    return Tile;

  })();

  jQuery(function() {
    var board;
    return board = new Board();
  });

}).call(this);
