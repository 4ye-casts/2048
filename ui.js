// Generated by CoffeeScript 1.7.1
(function() {
  var Board, Tile;

  Board = (function() {
    function Board() {
      this.size = 4;
      this.width = 100;
      this.padding = 15;
      this.init_dom();
      this.init_key_enent();
    }

    Board.prototype.init_dom = function() {
      this._init_board_dom();
      return this._init_new_game_button();
    };

    Board.prototype._init_board_dom = function() {
      var $board, $cell, board_width, col, i, row, _i, _j, _ref, _ref1, _results;
      board_width = this.size * this.width + (this.size + 1) * this.padding;
      this.$board = $board = jQuery('<div>').addClass('board').css({
        'width': board_width,
        'height': board_width
      }).appendTo(document.body);
      this.cells = [];
      for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.cells.push([]);
      }
      _results = [];
      for (row = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
        _results.push((function() {
          var _k, _ref2, _results1;
          _results1 = [];
          for (col = _k = 0, _ref2 = this.size; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; col = 0 <= _ref2 ? ++_k : --_k) {
            $cell = jQuery('<div>').addClass('cell').css({
              'width': this.width,
              'height': this.width,
              'top': this.padding + row * (this.padding + this.width),
              'left': this.padding + col * (this.padding + this.width)
            }).attr({
              'data-row': row,
              'data-col': col
            }).appendTo($board);
            _results1.push(this.cells[row][col] = $cell);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Board.prototype._init_new_game_button = function() {
      var $new_game_button;
      return $new_game_button = jQuery('<div>').addClass('new-game').html('New Game').appendTo(document.body).on('click', (function(_this) {
        return function() {
          return _this.start_new_game();
        };
      })(this));
    };

    Board.prototype.start_new_game = function() {
      var i, _i, _results;
      this.clear();
      _results = [];
      for (i = _i = 0; _i <= 1; i = ++_i) {
        _results.push(this.generate_tile());
      }
      return _results;
    };

    Board.prototype.clear = function() {
      var $cell, arr, i, j, _i, _len, _ref, _results;
      this.data = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(null);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.$board.find('.tile').remove();
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arr = _ref[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
            $cell = arr[_j];
            _results1.push($cell.removeClass('filled'));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Board.prototype.generate_tile = function() {
      var $cell, col, empty_cells, rand, row;
      empty_cells = this.empty_cells();
      rand = ~~(Math.random() * empty_cells.length);
      $cell = empty_cells[rand];
      $cell.addClass('filled');
      row = $cell.data('row');
      col = $cell.data('col');
      return this.data[row][col] = new Tile(this, row, col);
    };

    Board.prototype.empty_cells = function() {
      var $cell, arr, re, _i, _j, _len, _len1, _ref;
      re = [];
      _ref = this.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arr = _ref[_i];
        for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
          $cell = arr[_j];
          if (!$cell.hasClass('filled')) {
            re.push($cell);
          }
        }
      }
      return re;
    };

    Board.prototype.init_key_enent = function() {
      return jQuery(document).on('keydown', (function(_this) {
        return function(evt) {
          var direction;
          evt.preventDefault();
          direction = (function() {
            switch (evt.keyCode) {
              case 38:
                return 'up';
              case 40:
                return 'down';
              case 37:
                return 'left';
              case 39:
                return 'right';
            }
          })();
          if (direction) {
            return _this.move(direction);
          }
        };
      })(this));
    };

    Board.prototype.move = function(direction) {
      var arr, arrs, dir, i, j, merge, move, tile, _arr, _dir, _i, _j, _k, _len, _ref, _ref1, _results;
      dir = {
        left: [0, -1],
        right: [0, 1],
        up: [-1, 0],
        down: [1, 0]
      };
      _dir = dir[direction];
      if (direction === 'left') {
        arrs = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (j = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
                _results1.push(tile = this.data[i][j]);
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
      }
      if (direction === 'right') {
        arrs = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (j = _j = _ref1 = this.size - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; j = _ref1 <= 0 ? ++_j : --_j) {
                _results1.push(tile = this.data[i][j]);
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
      }
      if (direction === 'up') {
        arrs = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (j = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
                _results1.push(tile = this.data[j][i]);
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
      }
      if (direction === 'down') {
        arrs = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (j = _j = _ref1 = this.size - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; j = _ref1 <= 0 ? ++_j : --_j) {
                _results1.push(tile = this.data[j][i]);
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
      }
      this.merge_stack = (function() {
        var _i, _ref, _results;
        _results = [];
        for (j = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (i = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push([]);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = arrs.length; _i < _len; _i++) {
        arr = arrs[_i];
        _arr = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
            tile = arr[_j];
            if (tile) {
              _results.push(tile.number);
            } else {
              _results.push(null);
            }
          }
          return _results;
        })();
        merge = this.merge(_arr);
        for (i = _j = 0, _ref = this.size; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          tile = arr[i];
          move = merge[i];
          if (tile) {
            tile.move(_dir[0] * move, _dir[1] * move);
          }
        }
      }
      _results = [];
      for (i = _k = 0, _ref1 = this.size; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
        _results.push((function() {
          var _l, _ref2, _results1;
          _results1 = [];
          for (j = _l = 0, _ref2 = this.size; 0 <= _ref2 ? _l < _ref2 : _l > _ref2; j = 0 <= _ref2 ? ++_l : --_l) {
            merge = this.merge_stack[i][j];
            if (merge.length === 0) {
              this.cells[i][j].removeClass('filled');
            }
            if (merge.length === 1) {
              this.cells[i][j].addClass('filled');
            }
            if (merge.length === 2) {
              this.cells[i][j].removeClass('filled');
              merge[0].remove();
              _results1.push(merge[1].up());
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Board.prototype.merge = function(arr) {
      var c, last_number, move, number, re, rre, stack, _i, _j, _k, _len, _len1, _ref;
      re = [];
      stack = [];
      last_number = null;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        number = arr[_i];
        if (number === null) {
          stack.push(number);
          continue;
        }
        if (last_number === null) {
          stack.push(number);
          last_number = number;
          continue;
        }
        if (number === last_number) {
          stack.push(number);
          re.push(stack);
          stack = [];
          last_number = null;
          continue;
        }
        re.push(stack);
        stack = [number];
        last_number = number;
      }
      if (stack.length > 0) {
        re.push(stack);
      }
      rre = [];
      c = 0;
      for (_j = 0, _len1 = re.length; _j < _len1; _j++) {
        stack = re[_j];
        for (move = _k = 0, _ref = stack.length; 0 <= _ref ? _k < _ref : _k > _ref; move = 0 <= _ref ? ++_k : --_k) {
          if (stack[move] === null) {
            rre.push(null);
          } else {
            rre.push(move + c);
          }
        }
        c += stack.length - 1;
      }
      return rre;
    };

    return Board;

  })();

  Tile = (function() {
    function Tile(board, row, col) {
      this.board = board;
      this.row = row;
      this.col = col;
      this.number = 2;
      this.init_dom();
    }

    Tile.prototype.init_dom = function() {
      var $tile, padding, width;
      width = this.board.width;
      padding = this.board.padding;
      $tile = jQuery('<div>').addClass("tile num-" + this.number).html(this.number).css({
        'width': width,
        'height': width,
        'top': padding + this.row * (padding + width),
        'left': padding + this.col * (padding + width),
        'line-height': "" + width + "px"
      }).appendTo(this.board.$board);
      setTimeout(function() {
        return $tile.addClass('visible');
      }, 1);
      return this.$tile = $tile;
    };

    Tile.prototype.move = function(row, col) {
      var $cell, padding, width;
      width = this.board.width;
      padding = this.board.padding;
      this.$tile.css({
        top: "+=" + ((width + padding) * row),
        left: "+=" + ((width + padding) * col)
      });
      $cell = jQuery(this.board.cells).filter("[data-row=" + row + "]").filter("[data-col=" + col + "]");
      this.row = this.row + row;
      this.col = this.col + col;
      return this.board.merge_stack[this.row][this.col].push(this);
    };

    Tile.prototype.up = function() {
      this.$tile.removeClass("num-" + this.number);
      this.number = this.number * 2;
      this.$tile.html(this.number);
      return this.$tile.addClass("num-" + this.number);
    };

    Tile.prototype.remove = function() {
      this.$tile.css('z-index', 0);
      return setTimeout((function(_this) {
        return function() {
          return _this.$tile.remove();
        };
      })(this), 200);
    };

    return Tile;

  })();

  jQuery(function() {
    var board;
    board = new Board();
    return board.start_new_game();
  });

}).call(this);
