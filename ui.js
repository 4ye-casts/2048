// Generated by CoffeeScript 1.7.1
(function() {
  var Board, Tile;

  Board = (function() {
    function Board() {
      this.size = 4;
      this.width = 100;
      this.padding = 15;
      this.init_data();
      this.init_dom();
      this.init_key_enent();
    }

    Board.prototype.each_cell = function(func) {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(func(row, col));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Board.prototype.cell_pos = function(i) {
      return this.padding + i * (this.padding + this.width);
    };

    Board.prototype.init_data = function() {
      return this.data = this.each_cell(function() {
        return null;
      });
    };

    Board.prototype.init_dom = function() {
      this._init_board_dom();
      return this._init_new_game_button();
    };

    Board.prototype._init_board_dom = function() {
      var $board, board_width;
      board_width = this.size * this.width + (this.size + 1) * this.padding;
      this.$board = $board = jQuery('<div>').addClass('board').css({
        'width': board_width,
        'height': board_width
      }).appendTo(document.body);
      return this.each_cell((function(_this) {
        return function(row, col) {
          return jQuery('<div>').addClass('cell').css({
            'width': _this.width,
            'height': _this.width,
            'top': _this.cell_pos(row),
            'left': _this.cell_pos(col)
          }).attr({
            'data-row': row,
            'data-col': col
          }).appendTo($board);
        };
      })(this));
    };

    Board.prototype._init_new_game_button = function() {
      var $new_game_button;
      return $new_game_button = jQuery('<div>').addClass('new-game').html('New Game').appendTo(document.body).on('click', (function(_this) {
        return function() {
          return _this.start_new_game();
        };
      })(this));
    };

    Board.prototype.start_new_game = function() {
      this.clear();
      this.generate_tile();
      return this.generate_tile();
    };

    Board.prototype.clear = function() {
      this.$board.find('.tile').remove();
      return this.init_data();
    };

    Board.prototype.generate_tile = function() {
      var col, empty_cells, rand, row, _ref;
      empty_cells = this.empty_cells();
      rand = ~~(Math.random() * empty_cells.length);
      _ref = empty_cells[rand], row = _ref[0], col = _ref[1];
      return this.data[row][col] = new Tile(this, row, col);
    };

    Board.prototype.empty_cells = function() {
      var re;
      re = [];
      this.each_cell((function(_this) {
        return function(row, col) {
          if (_this.data[row][col] === null) {
            return re.push([row, col]);
          }
        };
      })(this));
      return re;
    };

    Board.prototype.init_key_enent = function() {
      return jQuery(document).on('keydown', (function(_this) {
        return function(evt) {
          var direction, moved;
          evt.preventDefault();
          direction = (function() {
            switch (evt.keyCode) {
              case 38:
                return 'up';
              case 40:
                return 'down';
              case 37:
                return 'left';
              case 39:
                return 'right';
            }
          })();
          if (direction) {
            moved = _this.move(direction);
          }
          if (moved) {
            return _this.generate_tile();
          }
        };
      })(this));
    };

    Board.prototype.move = function(direction) {
      var arr, arrs, moved, _i, _len;
      arrs = (function() {
        switch (direction) {
          case 'left':
            return this.each_cell((function(_this) {
              return function(row, col) {
                return _this.data[row][col];
              };
            })(this));
          case 'right':
            return this.each_cell((function(_this) {
              return function(row, col) {
                return _this.data[row][_this.size - 1 - col];
              };
            })(this));
          case 'up':
            return this.each_cell((function(_this) {
              return function(row, col) {
                return _this.data[col][row];
              };
            })(this));
          case 'down':
            return this.each_cell((function(_this) {
              return function(row, col) {
                return _this.data[_this.size - 1 - col][row];
              };
            })(this));
        }
      }).call(this);
      this.merge_stack = this.each_cell(function() {
        return [];
      });
      for (_i = 0, _len = arrs.length; _i < _len; _i++) {
        arr = arrs[_i];
        this._count_step(arr);
      }
      moved = false;
      this.each_cell((function(_this) {
        return function(row, col) {
          var step, tile;
          tile = _this.data[row][col];
          if (tile) {
            step = tile.step;
            tile.move(direction);
            if (step) {
              return moved = true;
            }
          }
        };
      })(this));
      this.each_cell((function(_this) {
        return function(row, col) {
          var merge;
          merge = _this.merge_stack[row][col];
          switch (merge.length) {
            case 0:
              return _this.data[row][col] = null;
            case 1:
              return _this.data[row][col] = merge[0];
            case 2:
              merge[0].remove();
              merge[1].up();
              return _this.data[row][col] = merge[1];
          }
        };
      })(this));
      return moved;
    };

    Board.prototype._count_step = function(arr) {
      var delta, group, groups, last_tile, step, temp, tile, _i, _j, _k, _len, _len1, _ref, _results;
      groups = [];
      temp = [];
      last_tile = null;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        tile = arr[_i];
        if (tile === null) {
          temp.push(tile);
          continue;
        }
        if (last_tile === null) {
          temp.push(tile);
          last_tile = tile;
          continue;
        }
        if (tile.number === last_tile.number) {
          temp.push(tile);
          groups.push(temp);
          temp = [];
          last_tile = null;
          continue;
        }
        groups.push(temp);
        temp = [tile];
        last_tile = tile;
      }
      if (temp.length) {
        groups.push(temp);
      }
      delta = 0;
      _results = [];
      for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
        group = groups[_j];
        for (step = _k = 0, _ref = group.length; 0 <= _ref ? _k < _ref : _k > _ref; step = 0 <= _ref ? ++_k : --_k) {
          tile = group[step];
          if (tile) {
            tile.step = delta + step;
          }
        }
        _results.push(delta += group.length - 1);
      }
      return _results;
    };

    return Board;

  })();

  Tile = (function() {
    function Tile(board, row, col, number) {
      this.board = board;
      this.row = row;
      this.col = col;
      this.number = number || 2;
      this.init_dom();
    }

    Tile.prototype.init_dom = function() {
      var $tile, width;
      width = this.board.width;
      $tile = jQuery('<div>').addClass("tile num-" + this.number).html(this.number).css({
        'width': width,
        'height': width,
        'top': this.board.cell_pos(this.row),
        'left': this.board.cell_pos(this.col),
        'line-height': "" + width + "px"
      }).appendTo(this.board.$board);
      setTimeout(function() {
        return $tile.addClass('visible');
      }, 1);
      return this.$tile = $tile;
    };

    Tile.prototype.move = function(direction) {
      var dir, _dir;
      dir = {
        left: [0, -1],
        right: [0, 1],
        up: [-1, 0],
        down: [1, 0]
      };
      _dir = dir[direction];
      this.row = this.row + this.step * _dir[0];
      this.col = this.col + this.step * _dir[1];
      this.$tile.css({
        top: this.board.cell_pos(this.row),
        left: this.board.cell_pos(this.col)
      });
      return this.board.merge_stack[this.row][this.col].push(this);
    };

    Tile.prototype.up = function() {
      this.$tile.removeClass("num-" + this.number);
      this.number = this.number * 2;
      this.$tile.html(this.number);
      return this.$tile.addClass("num-" + this.number);
    };

    Tile.prototype.remove = function() {
      this.$tile.css('z-index', 0);
      return setTimeout((function(_this) {
        return function() {
          return _this.$tile.remove();
        };
      })(this), 200);
    };

    return Tile;

  })();

  jQuery(function() {
    var board;
    board = new Board();
    return board.start_new_game();
  });

}).call(this);
